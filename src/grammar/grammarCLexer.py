# Generated from grammarC.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\64")
        buf.write("\u0167\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3")
        buf.write("\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t")
        buf.write("\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3")
        buf.write("\f\3\f\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$")
        buf.write("\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\7\'\u00f2\n\'\f")
        buf.write("\'\16\'\u00f5\13\'\3(\3(\3)\3)\3)\5)\u00fc\n)\3*\6*\u00ff")
        buf.write("\n*\r*\16*\u0100\3+\7+\u0104\n+\f+\16+\u0107\13+\3+\3")
        buf.write("+\6+\u010b\n+\r+\16+\u010c\3+\6+\u0110\n+\r+\16+\u0111")
        buf.write("\3+\3+\7+\u0116\n+\f+\16+\u0119\13+\5+\u011b\n+\3,\3,")
        buf.write("\3,\6,\u0120\n,\r,\16,\u0121\3,\3,\5,\u0126\n,\3-\3-\3")
        buf.write("-\3-\3.\3.\5.\u012e\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\5/\u013d\n/\3\60\6\60\u0140\n\60\r\60\16\60\u0141")
        buf.write("\3\60\3\60\3\61\3\61\5\61\u0148\n\61\3\61\5\61\u014b\n")
        buf.write("\61\3\61\3\61\3\62\3\62\3\62\3\62\7\62\u0153\n\62\f\62")
        buf.write("\16\62\u0156\13\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63")
        buf.write("\3\63\3\63\7\63\u0161\n\63\f\63\16\63\u0164\13\63\3\63")
        buf.write("\3\63\3\u0154\2\64\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n")
        buf.write("\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'")
        buf.write("\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ")
        buf.write("?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64\3")
        buf.write("\2\7\4\2C\\c|\5\2\62;C\\c|\3\2\62;\4\2\13\13\"\"\4\2\f")
        buf.write("\f\17\17\2\u0178\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2")
        buf.write("\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2")
        buf.write("\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3")
        buf.write("\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q")
        buf.write("\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2")
        buf.write("[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2")
        buf.write("\2e\3\2\2\2\3g\3\2\2\2\5p\3\2\2\2\7r\3\2\2\2\tv\3\2\2")
        buf.write("\2\13|\3\2\2\2\r~\3\2\2\2\17\u0080\3\2\2\2\21\u0082\3")
        buf.write("\2\2\2\23\u0084\3\2\2\2\25\u0086\3\2\2\2\27\u008d\3\2")
        buf.write("\2\2\31\u0090\3\2\2\2\33\u0093\3\2\2\2\35\u0095\3\2\2")
        buf.write("\2\37\u0097\3\2\2\2!\u009a\3\2\2\2#\u009f\3\2\2\2%\u00a5")
        buf.write("\3\2\2\2\'\u00a9\3\2\2\2)\u00ab\3\2\2\2+\u00ae\3\2\2\2")
        buf.write("-\u00b1\3\2\2\2/\u00b4\3\2\2\2\61\u00b6\3\2\2\2\63\u00bc")
        buf.write("\3\2\2\2\65\u00be\3\2\2\2\67\u00c0\3\2\2\29\u00c2\3\2")
        buf.write("\2\2;\u00c4\3\2\2\2=\u00c6\3\2\2\2?\u00ca\3\2\2\2A\u00d0")
        buf.write("\3\2\2\2C\u00d5\3\2\2\2E\u00da\3\2\2\2G\u00e0\3\2\2\2")
        buf.write("I\u00e5\3\2\2\2K\u00ea\3\2\2\2M\u00ef\3\2\2\2O\u00f6\3")
        buf.write("\2\2\2Q\u00fb\3\2\2\2S\u00fe\3\2\2\2U\u011a\3\2\2\2W\u0125")
        buf.write("\3\2\2\2Y\u0127\3\2\2\2[\u012d\3\2\2\2]\u013c\3\2\2\2")
        buf.write("_\u013f\3\2\2\2a\u014a\3\2\2\2c\u014e\3\2\2\2e\u015c\3")
        buf.write("\2\2\2gh\7%\2\2hi\7k\2\2ij\7p\2\2jk\7e\2\2kl\7n\2\2lm")
        buf.write("\7w\2\2mn\7f\2\2no\7g\2\2o\4\3\2\2\2pq\7>\2\2q\6\3\2\2")
        buf.write("\2rs\7\60\2\2st\7j\2\2tu\7@\2\2u\b\3\2\2\2vw\7u\2\2wx")
        buf.write("\7v\2\2xy\7f\2\2yz\7k\2\2z{\7q\2\2{\n\3\2\2\2|}\7*\2\2")
        buf.write("}\f\3\2\2\2~\177\7+\2\2\177\16\3\2\2\2\u0080\u0081\7}")
        buf.write("\2\2\u0081\20\3\2\2\2\u0082\u0083\7\177\2\2\u0083\22\3")
        buf.write("\2\2\2\u0084\u0085\7.\2\2\u0085\24\3\2\2\2\u0086\u0087")
        buf.write("\7t\2\2\u0087\u0088\7g\2\2\u0088\u0089\7v\2\2\u0089\u008a")
        buf.write("\7w\2\2\u008a\u008b\7t\2\2\u008b\u008c\7p\2\2\u008c\26")
        buf.write("\3\2\2\2\u008d\u008e\7-\2\2\u008e\u008f\7-\2\2\u008f\30")
        buf.write("\3\2\2\2\u0090\u0091\7/\2\2\u0091\u0092\7/\2\2\u0092\32")
        buf.write("\3\2\2\2\u0093\u0094\7]\2\2\u0094\34\3\2\2\2\u0095\u0096")
        buf.write("\7_\2\2\u0096\36\3\2\2\2\u0097\u0098\7k\2\2\u0098\u0099")
        buf.write("\7h\2\2\u0099 \3\2\2\2\u009a\u009b\7g\2\2\u009b\u009c")
        buf.write("\7n\2\2\u009c\u009d\7u\2\2\u009d\u009e\7g\2\2\u009e\"")
        buf.write("\3\2\2\2\u009f\u00a0\7y\2\2\u00a0\u00a1\7j\2\2\u00a1\u00a2")
        buf.write("\7k\2\2\u00a2\u00a3\7n\2\2\u00a3\u00a4\7g\2\2\u00a4$\3")
        buf.write("\2\2\2\u00a5\u00a6\7h\2\2\u00a6\u00a7\7q\2\2\u00a7\u00a8")
        buf.write("\7t\2\2\u00a8&\3\2\2\2\u00a9\u00aa\7@\2\2\u00aa(\3\2\2")
        buf.write("\2\u00ab\u00ac\7?\2\2\u00ac\u00ad\7?\2\2\u00ad*\3\2\2")
        buf.write("\2\u00ae\u00af\7>\2\2\u00af\u00b0\7?\2\2\u00b0,\3\2\2")
        buf.write("\2\u00b1\u00b2\7@\2\2\u00b2\u00b3\7?\2\2\u00b3.\3\2\2")
        buf.write("\2\u00b4\u00b5\7=\2\2\u00b5\60\3\2\2\2\u00b6\u00b7\7\"")
        buf.write("\2\2\u00b7\u00b8\7=\2\2\u00b8\u00b9\7\"\2\2\u00b9\u00ba")
        buf.write("\7=\2\2\u00ba\u00bb\7\"\2\2\u00bb\62\3\2\2\2\u00bc\u00bd")
        buf.write("\7-\2\2\u00bd\64\3\2\2\2\u00be\u00bf\7/\2\2\u00bf\66\3")
        buf.write("\2\2\2\u00c0\u00c1\7\'\2\2\u00c18\3\2\2\2\u00c2\u00c3")
        buf.write("\7,\2\2\u00c3:\3\2\2\2\u00c4\u00c5\7\61\2\2\u00c5<\3\2")
        buf.write("\2\2\u00c6\u00c7\7k\2\2\u00c7\u00c8\7p\2\2\u00c8\u00c9")
        buf.write("\7v\2\2\u00c9>\3\2\2\2\u00ca\u00cb\7h\2\2\u00cb\u00cc")
        buf.write("\7n\2\2\u00cc\u00cd\7q\2\2\u00cd\u00ce\7c\2\2\u00ce\u00cf")
        buf.write("\7v\2\2\u00cf@\3\2\2\2\u00d0\u00d1\7e\2\2\u00d1\u00d2")
        buf.write("\7j\2\2\u00d2\u00d3\7c\2\2\u00d3\u00d4\7t\2\2\u00d4B\3")
        buf.write("\2\2\2\u00d5\u00d6\7x\2\2\u00d6\u00d7\7q\2\2\u00d7\u00d8")
        buf.write("\7k\2\2\u00d8\u00d9\7f\2\2\u00d9D\3\2\2\2\u00da\u00db")
        buf.write("\7e\2\2\u00db\u00dc\7q\2\2\u00dc\u00dd\7p\2\2\u00dd\u00de")
        buf.write("\7u\2\2\u00de\u00df\7v\2\2\u00dfF\3\2\2\2\u00e0\u00e1")
        buf.write("\7o\2\2\u00e1\u00e2\7c\2\2\u00e2\u00e3\7k\2\2\u00e3\u00e4")
        buf.write("\7p\2\2\u00e4H\3\2\2\2\u00e5\u00e6\7c\2\2\u00e6\u00e7")
        buf.write("\7t\2\2\u00e7\u00e8\7i\2\2\u00e8\u00e9\7e\2\2\u00e9J\3")
        buf.write("\2\2\2\u00ea\u00eb\7c\2\2\u00eb\u00ec\7t\2\2\u00ec\u00ed")
        buf.write("\7i\2\2\u00ed\u00ee\7x\2\2\u00eeL\3\2\2\2\u00ef\u00f3")
        buf.write("\t\2\2\2\u00f0\u00f2\t\3\2\2\u00f1\u00f0\3\2\2\2\u00f2")
        buf.write("\u00f5\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4N\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6\u00f7\7?\2\2")
        buf.write("\u00f7P\3\2\2\2\u00f8\u00fc\5S*\2\u00f9\u00fc\5U+\2\u00fa")
        buf.write("\u00fc\5W,\2\u00fb\u00f8\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fb")
        buf.write("\u00fa\3\2\2\2\u00fcR\3\2\2\2\u00fd\u00ff\t\4\2\2\u00fe")
        buf.write("\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u00fe\3\2\2\2")
        buf.write("\u0100\u0101\3\2\2\2\u0101T\3\2\2\2\u0102\u0104\t\4\2")
        buf.write("\2\u0103\u0102\3\2\2\2\u0104\u0107\3\2\2\2\u0105\u0103")
        buf.write("\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0108\3\2\2\2\u0107")
        buf.write("\u0105\3\2\2\2\u0108\u010a\13\2\2\2\u0109\u010b\t\4\2")
        buf.write("\2\u010a\u0109\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010a")
        buf.write("\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u011b\3\2\2\2\u010e")
        buf.write("\u0110\t\4\2\2\u010f\u010e\3\2\2\2\u0110\u0111\3\2\2\2")
        buf.write("\u0111\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0113\3")
        buf.write("\2\2\2\u0113\u0117\13\2\2\2\u0114\u0116\t\4\2\2\u0115")
        buf.write("\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2")
        buf.write("\u0117\u0118\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3")
        buf.write("\2\2\2\u011a\u0105\3\2\2\2\u011a\u010f\3\2\2\2\u011bV")
        buf.write("\3\2\2\2\u011c\u011d\7)\2\2\u011d\u011f\t\2\2\2\u011e")
        buf.write("\u0120\t\2\2\2\u011f\u011e\3\2\2\2\u0120\u0121\3\2\2\2")
        buf.write("\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123\3")
        buf.write("\2\2\2\u0123\u0126\7)\2\2\u0124\u0126\5Y-\2\u0125\u011c")
        buf.write("\3\2\2\2\u0125\u0124\3\2\2\2\u0126X\3\2\2\2\u0127\u0128")
        buf.write("\7)\2\2\u0128\u0129\t\2\2\2\u0129\u012a\7)\2\2\u012aZ")
        buf.write("\3\2\2\2\u012b\u012e\5Q)\2\u012c\u012e\5W,\2\u012d\u012b")
        buf.write("\3\2\2\2\u012d\u012c\3\2\2\2\u012e\\\3\2\2\2\u012f\u0130")
        buf.write("\7e\2\2\u0130\u0131\7q\2\2\u0131\u0132\7p\2\2\u0132\u0133")
        buf.write("\7v\2\2\u0133\u0134\7k\2\2\u0134\u0135\7p\2\2\u0135\u0136")
        buf.write("\7w\2\2\u0136\u013d\7g\2\2\u0137\u0138\7d\2\2\u0138\u0139")
        buf.write("\7t\2\2\u0139\u013a\7g\2\2\u013a\u013b\7c\2\2\u013b\u013d")
        buf.write("\7m\2\2\u013c\u012f\3\2\2\2\u013c\u0137\3\2\2\2\u013d")
        buf.write("^\3\2\2\2\u013e\u0140\t\5\2\2\u013f\u013e\3\2\2\2\u0140")
        buf.write("\u0141\3\2\2\2\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\u0144\b\60\2\2\u0144`\3\2\2")
        buf.write("\2\u0145\u0147\7\17\2\2\u0146\u0148\7\f\2\2\u0147\u0146")
        buf.write("\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u014b\3\2\2\2\u0149")
        buf.write("\u014b\7\f\2\2\u014a\u0145\3\2\2\2\u014a\u0149\3\2\2\2")
        buf.write("\u014b\u014c\3\2\2\2\u014c\u014d\b\61\2\2\u014db\3\2\2")
        buf.write("\2\u014e\u014f\7\61\2\2\u014f\u0150\7,\2\2\u0150\u0154")
        buf.write("\3\2\2\2\u0151\u0153\13\2\2\2\u0152\u0151\3\2\2\2\u0153")
        buf.write("\u0156\3\2\2\2\u0154\u0155\3\2\2\2\u0154\u0152\3\2\2\2")
        buf.write("\u0155\u0157\3\2\2\2\u0156\u0154\3\2\2\2\u0157\u0158\7")
        buf.write(",\2\2\u0158\u0159\7\61\2\2\u0159\u015a\3\2\2\2\u015a\u015b")
        buf.write("\b\62\2\2\u015bd\3\2\2\2\u015c\u015d\7\61\2\2\u015d\u015e")
        buf.write("\7\61\2\2\u015e\u0162\3\2\2\2\u015f\u0161\n\6\2\2\u0160")
        buf.write("\u015f\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160\3\2\2\2")
        buf.write("\u0162\u0163\3\2\2\2\u0163\u0165\3\2\2\2\u0164\u0162\3")
        buf.write("\2\2\2\u0165\u0166\b\63\2\2\u0166f\3\2\2\2\25\2\u00f1")
        buf.write("\u00f3\u00fb\u0100\u0105\u010c\u0111\u0117\u011a\u0121")
        buf.write("\u0125\u012d\u013c\u0141\u0147\u014a\u0154\u0162\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class grammarCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    ID = 38
    EQ = 39
    LIT = 40
    INT = 41
    FLOAT = 42
    STR = 43
    CHAR = 44
    VALUE = 45
    KW = 46
    WS = 47
    NL = 48
    BC = 49
    LC = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'.h>'", "'stdio'", "'('", "')'", "'{'", 
            "'}'", "','", "'return'", "'++'", "'--'", "'['", "']'", "'if'", 
            "'else'", "'while'", "'for'", "'>'", "'=='", "'<='", "'>='", 
            "';'", "' ; ; '", "'+'", "'-'", "'%'", "'*'", "'/'", "'int'", 
            "'float'", "'char'", "'void'", "'const'", "'main'", "'argc'", 
            "'argv'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "EQ", "LIT", "INT", "FLOAT", "STR", "CHAR", "VALUE", "KW", 
            "WS", "NL", "BC", "LC" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "ID", "EQ", 
                  "LIT", "INT", "FLOAT", "STR", "CHAR", "VALUE", "KW", "WS", 
                  "NL", "BC", "LC" ]

    grammarFileName = "grammarC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


