# Generated from grammarC.g4 by ANTLR 4.6
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2,")
        buf.write("\u013a\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3")
        buf.write("\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\32")
        buf.write("\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3")
        buf.write("!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3%\3%\7%\u00ee\n%\f%\16%\u00f1\13%\3&\3&\7")
        buf.write("&\u00f5\n&\f&\16&\u00f8\13&\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\5\'\u0110\n\'\3(\6(\u0113\n(\r(\16(\u0114\3(")
        buf.write("\3(\3)\3)\5)\u011b\n)\3)\5)\u011e\n)\3)\3)\3*\3*\3*\3")
        buf.write("*\7*\u0126\n*\f*\16*\u0129\13*\3*\3*\3*\3*\3*\3+\3+\3")
        buf.write("+\3+\7+\u0134\n+\f+\16+\u0137\13+\3+\3+\3\u0127\2,\3\3")
        buf.write("\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U,\3\2\7\4\2C\\c|\5\2\62;C\\c|\3\2\62;\4\2\13\13\"\"")
        buf.write("\4\2\f\f\17\17\u0142\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2")
        buf.write("\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2")
        buf.write("\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31")
        buf.write("\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2")
        buf.write("\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3")
        buf.write("\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2")
        buf.write("\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3")
        buf.write("\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G")
        buf.write("\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2")
        buf.write("Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\3W\3\2\2\2\5`\3\2\2\2")
        buf.write("\7b\3\2\2\2\tf\3\2\2\2\13l\3\2\2\2\rn\3\2\2\2\17p\3\2")
        buf.write("\2\2\21r\3\2\2\2\23t\3\2\2\2\25v\3\2\2\2\27}\3\2\2\2\31")
        buf.write("\177\3\2\2\2\33\u0082\3\2\2\2\35\u0085\3\2\2\2\37\u0088")
        buf.write("\3\2\2\2!\u008d\3\2\2\2#\u0093\3\2\2\2%\u0097\3\2\2\2")
        buf.write("\'\u0099\3\2\2\2)\u009c\3\2\2\2+\u009f\3\2\2\2-\u00a2")
        buf.write("\3\2\2\2/\u00a4\3\2\2\2\61\u00aa\3\2\2\2\63\u00ac\3\2")
        buf.write("\2\2\65\u00ae\3\2\2\2\67\u00b0\3\2\2\29\u00b2\3\2\2\2")
        buf.write(";\u00b4\3\2\2\2=\u00b8\3\2\2\2?\u00be\3\2\2\2A\u00c3\3")
        buf.write("\2\2\2C\u00c8\3\2\2\2E\u00ce\3\2\2\2G\u00d4\3\2\2\2I\u00eb")
        buf.write("\3\2\2\2K\u00f2\3\2\2\2M\u010f\3\2\2\2O\u0112\3\2\2\2")
        buf.write("Q\u011d\3\2\2\2S\u0121\3\2\2\2U\u012f\3\2\2\2WX\7%\2\2")
        buf.write("XY\7k\2\2YZ\7p\2\2Z[\7e\2\2[\\\7n\2\2\\]\7w\2\2]^\7f\2")
        buf.write("\2^_\7g\2\2_\4\3\2\2\2`a\7>\2\2a\6\3\2\2\2bc\7\60\2\2")
        buf.write("cd\7j\2\2de\7@\2\2e\b\3\2\2\2fg\7u\2\2gh\7v\2\2hi\7f\2")
        buf.write("\2ij\7k\2\2jk\7q\2\2k\n\3\2\2\2lm\7*\2\2m\f\3\2\2\2no")
        buf.write("\7+\2\2o\16\3\2\2\2pq\7}\2\2q\20\3\2\2\2rs\7\177\2\2s")
        buf.write("\22\3\2\2\2tu\7.\2\2u\24\3\2\2\2vw\7t\2\2wx\7g\2\2xy\7")
        buf.write("v\2\2yz\7w\2\2z{\7t\2\2{|\7p\2\2|\26\3\2\2\2}~\7?\2\2")
        buf.write("~\30\3\2\2\2\177\u0080\7-\2\2\u0080\u0081\7-\2\2\u0081")
        buf.write("\32\3\2\2\2\u0082\u0083\7/\2\2\u0083\u0084\7/\2\2\u0084")
        buf.write("\34\3\2\2\2\u0085\u0086\7k\2\2\u0086\u0087\7h\2\2\u0087")
        buf.write("\36\3\2\2\2\u0088\u0089\7g\2\2\u0089\u008a\7n\2\2\u008a")
        buf.write("\u008b\7u\2\2\u008b\u008c\7g\2\2\u008c \3\2\2\2\u008d")
        buf.write("\u008e\7y\2\2\u008e\u008f\7j\2\2\u008f\u0090\7k\2\2\u0090")
        buf.write("\u0091\7n\2\2\u0091\u0092\7g\2\2\u0092\"\3\2\2\2\u0093")
        buf.write("\u0094\7h\2\2\u0094\u0095\7q\2\2\u0095\u0096\7t\2\2\u0096")
        buf.write("$\3\2\2\2\u0097\u0098\7@\2\2\u0098&\3\2\2\2\u0099\u009a")
        buf.write("\7?\2\2\u009a\u009b\7?\2\2\u009b(\3\2\2\2\u009c\u009d")
        buf.write("\7>\2\2\u009d\u009e\7?\2\2\u009e*\3\2\2\2\u009f\u00a0")
        buf.write("\7@\2\2\u00a0\u00a1\7?\2\2\u00a1,\3\2\2\2\u00a2\u00a3")
        buf.write("\7=\2\2\u00a3.\3\2\2\2\u00a4\u00a5\7\"\2\2\u00a5\u00a6")
        buf.write("\7=\2\2\u00a6\u00a7\7\"\2\2\u00a7\u00a8\7=\2\2\u00a8\u00a9")
        buf.write("\7\"\2\2\u00a9\60\3\2\2\2\u00aa\u00ab\7-\2\2\u00ab\62")
        buf.write("\3\2\2\2\u00ac\u00ad\7/\2\2\u00ad\64\3\2\2\2\u00ae\u00af")
        buf.write("\7\'\2\2\u00af\66\3\2\2\2\u00b0\u00b1\7,\2\2\u00b18\3")
        buf.write("\2\2\2\u00b2\u00b3\7\61\2\2\u00b3:\3\2\2\2\u00b4\u00b5")
        buf.write("\7k\2\2\u00b5\u00b6\7p\2\2\u00b6\u00b7\7v\2\2\u00b7<\3")
        buf.write("\2\2\2\u00b8\u00b9\7h\2\2\u00b9\u00ba\7n\2\2\u00ba\u00bb")
        buf.write("\7q\2\2\u00bb\u00bc\7c\2\2\u00bc\u00bd\7v\2\2\u00bd>\3")
        buf.write("\2\2\2\u00be\u00bf\7e\2\2\u00bf\u00c0\7j\2\2\u00c0\u00c1")
        buf.write("\7c\2\2\u00c1\u00c2\7t\2\2\u00c2@\3\2\2\2\u00c3\u00c4")
        buf.write("\7x\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6\7k\2\2\u00c6\u00c7")
        buf.write("\7f\2\2\u00c7B\3\2\2\2\u00c8\u00c9\7e\2\2\u00c9\u00ca")
        buf.write("\7q\2\2\u00ca\u00cb\7p\2\2\u00cb\u00cc\7u\2\2\u00cc\u00cd")
        buf.write("\7v\2\2\u00cdD\3\2\2\2\u00ce\u00cf\7o\2\2\u00cf\u00d0")
        buf.write("\7c\2\2\u00d0\u00d1\7k\2\2\u00d1\u00d2\7p\2\2\u00d2\u00d3")
        buf.write("\7*\2\2\u00d3F\3\2\2\2\u00d4\u00d5\7k\2\2\u00d5\u00d6")
        buf.write("\7p\2\2\u00d6\u00d7\7v\2\2\u00d7\u00d8\7\"\2\2\u00d8\u00d9")
        buf.write("\7c\2\2\u00d9\u00da\7t\2\2\u00da\u00db\7i\2\2\u00db\u00dc")
        buf.write("\7e\2\2\u00dc\u00dd\7.\2\2\u00dd\u00de\7\"\2\2\u00de\u00df")
        buf.write("\7e\2\2\u00df\u00e0\7j\2\2\u00e0\u00e1\7c\2\2\u00e1\u00e2")
        buf.write("\7t\2\2\u00e2\u00e3\7\"\2\2\u00e3\u00e4\7,\2\2\u00e4\u00e5")
        buf.write("\7c\2\2\u00e5\u00e6\7t\2\2\u00e6\u00e7\7i\2\2\u00e7\u00e8")
        buf.write("\7x\2\2\u00e8\u00e9\7]\2\2\u00e9\u00ea\7_\2\2\u00eaH\3")
        buf.write("\2\2\2\u00eb\u00ef\t\2\2\2\u00ec\u00ee\t\3\2\2\u00ed\u00ec")
        buf.write("\3\2\2\2\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef")
        buf.write("\u00f0\3\2\2\2\u00f0J\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2")
        buf.write("\u00f6\t\4\2\2\u00f3\u00f5\t\4\2\2\u00f4\u00f3\3\2\2\2")
        buf.write("\u00f5\u00f8\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7\3")
        buf.write("\2\2\2\u00f7L\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9\u00fa")
        buf.write("\7e\2\2\u00fa\u00fb\7q\2\2\u00fb\u00fc\7p\2\2\u00fc\u00fd")
        buf.write("\7v\2\2\u00fd\u00fe\7k\2\2\u00fe\u00ff\7p\2\2\u00ff\u0100")
        buf.write("\7w\2\2\u0100\u0101\7g\2\2\u0101\u0110\7=\2\2\u0102\u0103")
        buf.write("\7d\2\2\u0103\u0104\7t\2\2\u0104\u0105\7g\2\2\u0105\u0106")
        buf.write("\7c\2\2\u0106\u0107\7m\2\2\u0107\u0110\7=\2\2\u0108\u0109")
        buf.write("\7t\2\2\u0109\u010a\7g\2\2\u010a\u010b\7v\2\2\u010b\u010c")
        buf.write("\7w\2\2\u010c\u010d\7t\2\2\u010d\u010e\7p\2\2\u010e\u0110")
        buf.write("\7=\2\2\u010f\u00f9\3\2\2\2\u010f\u0102\3\2\2\2\u010f")
        buf.write("\u0108\3\2\2\2\u0110N\3\2\2\2\u0111\u0113\t\5\2\2\u0112")
        buf.write("\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0112\3\2\2\2")
        buf.write("\u0114\u0115\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117\b")
        buf.write("(\2\2\u0117P\3\2\2\2\u0118\u011a\7\17\2\2\u0119\u011b")
        buf.write("\7\f\2\2\u011a\u0119\3\2\2\2\u011a\u011b\3\2\2\2\u011b")
        buf.write("\u011e\3\2\2\2\u011c\u011e\7\f\2\2\u011d\u0118\3\2\2\2")
        buf.write("\u011d\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u0120\b")
        buf.write(")\2\2\u0120R\3\2\2\2\u0121\u0122\7\61\2\2\u0122\u0123")
        buf.write("\7,\2\2\u0123\u0127\3\2\2\2\u0124\u0126\13\2\2\2\u0125")
        buf.write("\u0124\3\2\2\2\u0126\u0129\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0127\u0125\3\2\2\2\u0128\u012a\3\2\2\2\u0129\u0127\3")
        buf.write("\2\2\2\u012a\u012b\7,\2\2\u012b\u012c\7\61\2\2\u012c\u012d")
        buf.write("\3\2\2\2\u012d\u012e\b*\2\2\u012eT\3\2\2\2\u012f\u0130")
        buf.write("\7\61\2\2\u0130\u0131\7\61\2\2\u0131\u0135\3\2\2\2\u0132")
        buf.write("\u0134\n\6\2\2\u0133\u0132\3\2\2\2\u0134\u0137\3\2\2\2")
        buf.write("\u0135\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0138\3")
        buf.write("\2\2\2\u0137\u0135\3\2\2\2\u0138\u0139\b+\2\2\u0139V\3")
        buf.write("\2\2\2\f\2\u00ed\u00ef\u00f6\u010f\u0114\u011a\u011d\u0127")
        buf.write("\u0135\3\b\2\2")
        return buf.getvalue()


class grammarCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    ID = 36
    LIT = 37
    KW = 38
    WS = 39
    NL = 40
    BC = 41
    LC = 42

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'.h>'", "'stdio'", "'('", "')'", "'{'", 
            "'}'", "','", "'return'", "'='", "'++'", "'--'", "'if'", "'else'", 
            "'while'", "'for'", "'>'", "'=='", "'<='", "'>='", "';'", "' ; ; '", 
            "'+'", "'-'", "'%'", "'*'", "'/'", "'int'", "'float'", "'char'", 
            "'void'", "'const'", "'main('", "'int argc, char *argv[]'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "LIT", "KW", "WS", "NL", "BC", "LC" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "ID", "LIT", "KW", "WS", "NL", 
                  "BC", "LC" ]

    grammarFileName = "grammarC.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.6")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


