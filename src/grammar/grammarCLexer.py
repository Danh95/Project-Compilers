# Generated from grammarC.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u014c\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3")
        buf.write("\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b")
        buf.write("\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\20\3\20")
        buf.write("\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3")
        buf.write("%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\7(\u00ea")
        buf.write("\n(\f(\16(\u00ed\13(\3)\6)\u00f0\n)\r)\16)\u00f1\3)\7")
        buf.write(")\u00f5\n)\f)\16)\u00f8\13)\3)\3)\6)\u00fc\n)\r)\16)\u00fd")
        buf.write("\3)\6)\u0101\n)\r)\16)\u0102\3)\3)\7)\u0107\n)\f)\16)")
        buf.write("\u010a\13)\3)\3)\6)\u010e\n)\r)\16)\u010f\3)\5)\u0113")
        buf.write("\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0122\n")
        buf.write("*\3+\6+\u0125\n+\r+\16+\u0126\3+\3+\3,\3,\5,\u012d\n,")
        buf.write("\3,\5,\u0130\n,\3,\3,\3-\3-\3-\3-\7-\u0138\n-\f-\16-\u013b")
        buf.write("\13-\3-\3-\3-\3-\3-\3.\3.\3.\3.\7.\u0146\n.\f.\16.\u0149")
        buf.write("\13.\3.\3.\3\u0139\2/\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21")
        buf.write("\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24")
        buf.write("\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37")
        buf.write("= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/\3\2\b\4\2C\\c|\5\2")
        buf.write("\62;C\\c|\3\2\62;\5\2\60\60\62\62;;\4\2\13\13\"\"\4\2")
        buf.write("\f\f\17\17\2\u015b\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2")
        buf.write("\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2")
        buf.write("\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3")
        buf.write("\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q")
        buf.write("\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2")
        buf.write("[\3\2\2\2\3]\3\2\2\2\5f\3\2\2\2\7h\3\2\2\2\tl\3\2\2\2")
        buf.write("\13r\3\2\2\2\rt\3\2\2\2\17v\3\2\2\2\21x\3\2\2\2\23z\3")
        buf.write("\2\2\2\25|\3\2\2\2\27\u0083\3\2\2\2\31\u0085\3\2\2\2\33")
        buf.write("\u0088\3\2\2\2\35\u008b\3\2\2\2\37\u008d\3\2\2\2!\u008f")
        buf.write("\3\2\2\2#\u0092\3\2\2\2%\u0097\3\2\2\2\'\u009d\3\2\2\2")
        buf.write(")\u00a1\3\2\2\2+\u00a3\3\2\2\2-\u00a6\3\2\2\2/\u00a9\3")
        buf.write("\2\2\2\61\u00ac\3\2\2\2\63\u00ae\3\2\2\2\65\u00b4\3\2")
        buf.write("\2\2\67\u00b6\3\2\2\29\u00b8\3\2\2\2;\u00ba\3\2\2\2=\u00bc")
        buf.write("\3\2\2\2?\u00be\3\2\2\2A\u00c2\3\2\2\2C\u00c8\3\2\2\2")
        buf.write("E\u00cd\3\2\2\2G\u00d2\3\2\2\2I\u00d8\3\2\2\2K\u00dd\3")
        buf.write("\2\2\2M\u00e2\3\2\2\2O\u00e7\3\2\2\2Q\u0112\3\2\2\2S\u0121")
        buf.write("\3\2\2\2U\u0124\3\2\2\2W\u012f\3\2\2\2Y\u0133\3\2\2\2")
        buf.write("[\u0141\3\2\2\2]^\7%\2\2^_\7k\2\2_`\7p\2\2`a\7e\2\2ab")
        buf.write("\7n\2\2bc\7w\2\2cd\7f\2\2de\7g\2\2e\4\3\2\2\2fg\7>\2\2")
        buf.write("g\6\3\2\2\2hi\7\60\2\2ij\7j\2\2jk\7@\2\2k\b\3\2\2\2lm")
        buf.write("\7u\2\2mn\7v\2\2no\7f\2\2op\7k\2\2pq\7q\2\2q\n\3\2\2\2")
        buf.write("rs\7*\2\2s\f\3\2\2\2tu\7+\2\2u\16\3\2\2\2vw\7}\2\2w\20")
        buf.write("\3\2\2\2xy\7\177\2\2y\22\3\2\2\2z{\7.\2\2{\24\3\2\2\2")
        buf.write("|}\7t\2\2}~\7g\2\2~\177\7v\2\2\177\u0080\7w\2\2\u0080")
        buf.write("\u0081\7t\2\2\u0081\u0082\7p\2\2\u0082\26\3\2\2\2\u0083")
        buf.write("\u0084\7?\2\2\u0084\30\3\2\2\2\u0085\u0086\7-\2\2\u0086")
        buf.write("\u0087\7-\2\2\u0087\32\3\2\2\2\u0088\u0089\7/\2\2\u0089")
        buf.write("\u008a\7/\2\2\u008a\34\3\2\2\2\u008b\u008c\7]\2\2\u008c")
        buf.write("\36\3\2\2\2\u008d\u008e\7_\2\2\u008e \3\2\2\2\u008f\u0090")
        buf.write("\7k\2\2\u0090\u0091\7h\2\2\u0091\"\3\2\2\2\u0092\u0093")
        buf.write("\7g\2\2\u0093\u0094\7n\2\2\u0094\u0095\7u\2\2\u0095\u0096")
        buf.write("\7g\2\2\u0096$\3\2\2\2\u0097\u0098\7y\2\2\u0098\u0099")
        buf.write("\7j\2\2\u0099\u009a\7k\2\2\u009a\u009b\7n\2\2\u009b\u009c")
        buf.write("\7g\2\2\u009c&\3\2\2\2\u009d\u009e\7h\2\2\u009e\u009f")
        buf.write("\7q\2\2\u009f\u00a0\7t\2\2\u00a0(\3\2\2\2\u00a1\u00a2")
        buf.write("\7@\2\2\u00a2*\3\2\2\2\u00a3\u00a4\7?\2\2\u00a4\u00a5")
        buf.write("\7?\2\2\u00a5,\3\2\2\2\u00a6\u00a7\7>\2\2\u00a7\u00a8")
        buf.write("\7?\2\2\u00a8.\3\2\2\2\u00a9\u00aa\7@\2\2\u00aa\u00ab")
        buf.write("\7?\2\2\u00ab\60\3\2\2\2\u00ac\u00ad\7=\2\2\u00ad\62\3")
        buf.write("\2\2\2\u00ae\u00af\7\"\2\2\u00af\u00b0\7=\2\2\u00b0\u00b1")
        buf.write("\7\"\2\2\u00b1\u00b2\7=\2\2\u00b2\u00b3\7\"\2\2\u00b3")
        buf.write("\64\3\2\2\2\u00b4\u00b5\7-\2\2\u00b5\66\3\2\2\2\u00b6")
        buf.write("\u00b7\7/\2\2\u00b78\3\2\2\2\u00b8\u00b9\7\'\2\2\u00b9")
        buf.write(":\3\2\2\2\u00ba\u00bb\7,\2\2\u00bb<\3\2\2\2\u00bc\u00bd")
        buf.write("\7\61\2\2\u00bd>\3\2\2\2\u00be\u00bf\7k\2\2\u00bf\u00c0")
        buf.write("\7p\2\2\u00c0\u00c1\7v\2\2\u00c1@\3\2\2\2\u00c2\u00c3")
        buf.write("\7h\2\2\u00c3\u00c4\7n\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6")
        buf.write("\7c\2\2\u00c6\u00c7\7v\2\2\u00c7B\3\2\2\2\u00c8\u00c9")
        buf.write("\7e\2\2\u00c9\u00ca\7j\2\2\u00ca\u00cb\7c\2\2\u00cb\u00cc")
        buf.write("\7t\2\2\u00ccD\3\2\2\2\u00cd\u00ce\7x\2\2\u00ce\u00cf")
        buf.write("\7q\2\2\u00cf\u00d0\7k\2\2\u00d0\u00d1\7f\2\2\u00d1F\3")
        buf.write("\2\2\2\u00d2\u00d3\7e\2\2\u00d3\u00d4\7q\2\2\u00d4\u00d5")
        buf.write("\7p\2\2\u00d5\u00d6\7u\2\2\u00d6\u00d7\7v\2\2\u00d7H\3")
        buf.write("\2\2\2\u00d8\u00d9\7o\2\2\u00d9\u00da\7c\2\2\u00da\u00db")
        buf.write("\7k\2\2\u00db\u00dc\7p\2\2\u00dcJ\3\2\2\2\u00dd\u00de")
        buf.write("\7c\2\2\u00de\u00df\7t\2\2\u00df\u00e0\7i\2\2\u00e0\u00e1")
        buf.write("\7e\2\2\u00e1L\3\2\2\2\u00e2\u00e3\7c\2\2\u00e3\u00e4")
        buf.write("\7t\2\2\u00e4\u00e5\7i\2\2\u00e5\u00e6\7x\2\2\u00e6N\3")
        buf.write("\2\2\2\u00e7\u00eb\t\2\2\2\u00e8\u00ea\t\3\2\2\u00e9\u00e8")
        buf.write("\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb")
        buf.write("\u00ec\3\2\2\2\u00ecP\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee")
        buf.write("\u00f0\t\4\2\2\u00ef\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2")
        buf.write("\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u0113\3")
        buf.write("\2\2\2\u00f3\u00f5\t\4\2\2\u00f4\u00f3\3\2\2\2\u00f5\u00f8")
        buf.write("\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7")
        buf.write("\u00f9\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9\u00fb\13\2\2")
        buf.write("\2\u00fa\u00fc\t\5\2\2\u00fb\u00fa\3\2\2\2\u00fc\u00fd")
        buf.write("\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe")
        buf.write("\u0113\3\2\2\2\u00ff\u0101\t\4\2\2\u0100\u00ff\3\2\2\2")
        buf.write("\u0101\u0102\3\2\2\2\u0102\u0100\3\2\2\2\u0102\u0103\3")
        buf.write("\2\2\2\u0103\u0104\3\2\2\2\u0104\u0108\13\2\2\2\u0105")
        buf.write("\u0107\t\4\2\2\u0106\u0105\3\2\2\2\u0107\u010a\3\2\2\2")
        buf.write("\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u0113\3")
        buf.write("\2\2\2\u010a\u0108\3\2\2\2\u010b\u010d\7)\2\2\u010c\u010e")
        buf.write("\t\2\2\2\u010d\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f")
        buf.write("\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0111\3\2\2\2")
        buf.write("\u0111\u0113\7)\2\2\u0112\u00ef\3\2\2\2\u0112\u00f6\3")
        buf.write("\2\2\2\u0112\u0100\3\2\2\2\u0112\u010b\3\2\2\2\u0113R")
        buf.write("\3\2\2\2\u0114\u0115\7e\2\2\u0115\u0116\7q\2\2\u0116\u0117")
        buf.write("\7p\2\2\u0117\u0118\7v\2\2\u0118\u0119\7k\2\2\u0119\u011a")
        buf.write("\7p\2\2\u011a\u011b\7w\2\2\u011b\u0122\7g\2\2\u011c\u011d")
        buf.write("\7d\2\2\u011d\u011e\7t\2\2\u011e\u011f\7g\2\2\u011f\u0120")
        buf.write("\7c\2\2\u0120\u0122\7m\2\2\u0121\u0114\3\2\2\2\u0121\u011c")
        buf.write("\3\2\2\2\u0122T\3\2\2\2\u0123\u0125\t\6\2\2\u0124\u0123")
        buf.write("\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0124\3\2\2\2\u0126")
        buf.write("\u0127\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0129\b+\2\2")
        buf.write("\u0129V\3\2\2\2\u012a\u012c\7\17\2\2\u012b\u012d\7\f\2")
        buf.write("\2\u012c\u012b\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u0130")
        buf.write("\3\2\2\2\u012e\u0130\7\f\2\2\u012f\u012a\3\2\2\2\u012f")
        buf.write("\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\b,\2\2")
        buf.write("\u0132X\3\2\2\2\u0133\u0134\7\61\2\2\u0134\u0135\7,\2")
        buf.write("\2\u0135\u0139\3\2\2\2\u0136\u0138\13\2\2\2\u0137\u0136")
        buf.write("\3\2\2\2\u0138\u013b\3\2\2\2\u0139\u013a\3\2\2\2\u0139")
        buf.write("\u0137\3\2\2\2\u013a\u013c\3\2\2\2\u013b\u0139\3\2\2\2")
        buf.write("\u013c\u013d\7,\2\2\u013d\u013e\7\61\2\2\u013e\u013f\3")
        buf.write("\2\2\2\u013f\u0140\b-\2\2\u0140Z\3\2\2\2\u0141\u0142\7")
        buf.write("\61\2\2\u0142\u0143\7\61\2\2\u0143\u0147\3\2\2\2\u0144")
        buf.write("\u0146\n\7\2\2\u0145\u0144\3\2\2\2\u0146\u0149\3\2\2\2")
        buf.write("\u0147\u0145\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u014a\3")
        buf.write("\2\2\2\u0149\u0147\3\2\2\2\u014a\u014b\b.\2\2\u014b\\")
        buf.write("\3\2\2\2\22\2\u00e9\u00eb\u00f1\u00f6\u00fd\u0102\u0108")
        buf.write("\u010f\u0112\u0121\u0126\u012c\u012f\u0139\u0147\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class grammarCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    ID = 39
    LIT = 40
    KW = 41
    WS = 42
    NL = 43
    BC = 44
    LC = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'.h>'", "'stdio'", "'('", "')'", "'{'", 
            "'}'", "','", "'return'", "'='", "'++'", "'--'", "'['", "']'", 
            "'if'", "'else'", "'while'", "'for'", "'>'", "'=='", "'<='", 
            "'>='", "';'", "' ; ; '", "'+'", "'-'", "'%'", "'*'", "'/'", 
            "'int'", "'float'", "'char'", "'void'", "'const'", "'main'", 
            "'argc'", "'argv'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "LIT", "KW", "WS", "NL", "BC", "LC" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "ID", "LIT", "KW", "WS", "NL", "BC", "LC" ]

    grammarFileName = "grammarC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


