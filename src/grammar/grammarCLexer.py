# Generated from grammarC.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\60")
        buf.write("\u014c\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3")
        buf.write("\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3")
        buf.write("\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33")
        buf.write("\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3")
        buf.write("%\3&\6&\u00e5\n&\r&\16&\u00e6\3\'\7\'\u00ea\n\'\f\'\16")
        buf.write("\'\u00ed\13\'\3\'\3\'\6\'\u00f1\n\'\r\'\16\'\u00f2\3\'")
        buf.write("\6\'\u00f6\n\'\r\'\16\'\u00f7\3\'\3\'\7\'\u00fc\n\'\f")
        buf.write("\'\16\'\u00ff\13\'\5\'\u0101\n\'\3(\3(\3(\6(\u0106\n(")
        buf.write("\r(\16(\u0107\3(\3(\5(\u010c\n(\3)\3)\3)\3)\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\5*\u011b\n*\3+\3+\7+\u011f\n+\f+\16+")
        buf.write("\u0122\13+\3,\6,\u0125\n,\r,\16,\u0126\3,\3,\3-\3-\5-")
        buf.write("\u012d\n-\3-\5-\u0130\n-\3-\3-\3.\3.\3.\3.\7.\u0138\n")
        buf.write(".\f.\16.\u013b\13.\3.\3.\3.\3.\3.\3/\3/\3/\3/\7/\u0146")
        buf.write("\n/\f/\16/\u0149\13/\3/\3/\3\u0139\2\60\3\3\5\4\7\5\t")
        buf.write("\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60")
        buf.write("\3\2\7\3\2\62;\4\2C\\c|\6\2\62;C\\aac|\5\2\13\f\17\17")
        buf.write("\"\"\4\2\f\f\17\17\2\u015a\2\3\3\2\2\2\2\5\3\2\2\2\2\7")
        buf.write("\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2")
        buf.write("\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2")
        buf.write("\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2")
        buf.write("\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2")
        buf.write("\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\3_\3\2\2\2\5h\3\2\2\2\7")
        buf.write("j\3\2\2\2\tn\3\2\2\2\13t\3\2\2\2\rv\3\2\2\2\17x\3\2\2")
        buf.write("\2\21z\3\2\2\2\23|\3\2\2\2\25~\3\2\2\2\27\u0085\3\2\2")
        buf.write("\2\31\u0087\3\2\2\2\33\u0089\3\2\2\2\35\u008c\3\2\2\2")
        buf.write("\37\u0091\3\2\2\2!\u0097\3\2\2\2#\u009b\3\2\2\2%\u009d")
        buf.write("\3\2\2\2\'\u00a6\3\2\2\2)\u00ac\3\2\2\2+\u00b0\3\2\2\2")
        buf.write("-\u00b6\3\2\2\2/\u00bb\3\2\2\2\61\u00c0\3\2\2\2\63\u00c2")
        buf.write("\3\2\2\2\65\u00c4\3\2\2\2\67\u00c6\3\2\2\29\u00c8\3\2")
        buf.write("\2\2;\u00ca\3\2\2\2=\u00cc\3\2\2\2?\u00cf\3\2\2\2A\u00d2")
        buf.write("\3\2\2\2C\u00d5\3\2\2\2E\u00d8\3\2\2\2G\u00db\3\2\2\2")
        buf.write("I\u00e1\3\2\2\2K\u00e4\3\2\2\2M\u0100\3\2\2\2O\u010b\3")
        buf.write("\2\2\2Q\u010d\3\2\2\2S\u011a\3\2\2\2U\u011c\3\2\2\2W\u0124")
        buf.write("\3\2\2\2Y\u012f\3\2\2\2[\u0133\3\2\2\2]\u0141\3\2\2\2")
        buf.write("_`\7%\2\2`a\7k\2\2ab\7p\2\2bc\7e\2\2cd\7n\2\2de\7w\2\2")
        buf.write("ef\7f\2\2fg\7g\2\2g\4\3\2\2\2hi\7>\2\2i\6\3\2\2\2jk\7")
        buf.write("\60\2\2kl\7j\2\2lm\7@\2\2m\b\3\2\2\2no\7u\2\2op\7v\2\2")
        buf.write("pq\7f\2\2qr\7k\2\2rs\7q\2\2s\n\3\2\2\2tu\7*\2\2u\f\3\2")
        buf.write("\2\2vw\7+\2\2w\16\3\2\2\2xy\7}\2\2y\20\3\2\2\2z{\7\177")
        buf.write("\2\2{\22\3\2\2\2|}\7.\2\2}\24\3\2\2\2~\177\7t\2\2\177")
        buf.write("\u0080\7g\2\2\u0080\u0081\7v\2\2\u0081\u0082\7w\2\2\u0082")
        buf.write("\u0083\7t\2\2\u0083\u0084\7p\2\2\u0084\26\3\2\2\2\u0085")
        buf.write("\u0086\7]\2\2\u0086\30\3\2\2\2\u0087\u0088\7_\2\2\u0088")
        buf.write("\32\3\2\2\2\u0089\u008a\7k\2\2\u008a\u008b\7h\2\2\u008b")
        buf.write("\34\3\2\2\2\u008c\u008d\7g\2\2\u008d\u008e\7n\2\2\u008e")
        buf.write("\u008f\7u\2\2\u008f\u0090\7g\2\2\u0090\36\3\2\2\2\u0091")
        buf.write("\u0092\7y\2\2\u0092\u0093\7j\2\2\u0093\u0094\7k\2\2\u0094")
        buf.write("\u0095\7n\2\2\u0095\u0096\7g\2\2\u0096 \3\2\2\2\u0097")
        buf.write("\u0098\7h\2\2\u0098\u0099\7q\2\2\u0099\u009a\7t\2\2\u009a")
        buf.write("\"\3\2\2\2\u009b\u009c\7=\2\2\u009c$\3\2\2\2\u009d\u009e")
        buf.write("\7e\2\2\u009e\u009f\7q\2\2\u009f\u00a0\7p\2\2\u00a0\u00a1")
        buf.write("\7v\2\2\u00a1\u00a2\7k\2\2\u00a2\u00a3\7p\2\2\u00a3\u00a4")
        buf.write("\7w\2\2\u00a4\u00a5\7g\2\2\u00a5&\3\2\2\2\u00a6\u00a7")
        buf.write("\7d\2\2\u00a7\u00a8\7t\2\2\u00a8\u00a9\7g\2\2\u00a9\u00aa")
        buf.write("\7c\2\2\u00aa\u00ab\7m\2\2\u00ab(\3\2\2\2\u00ac\u00ad")
        buf.write("\7k\2\2\u00ad\u00ae\7p\2\2\u00ae\u00af\7v\2\2\u00af*\3")
        buf.write("\2\2\2\u00b0\u00b1\7h\2\2\u00b1\u00b2\7n\2\2\u00b2\u00b3")
        buf.write("\7q\2\2\u00b3\u00b4\7c\2\2\u00b4\u00b5\7v\2\2\u00b5,\3")
        buf.write("\2\2\2\u00b6\u00b7\7e\2\2\u00b7\u00b8\7j\2\2\u00b8\u00b9")
        buf.write("\7c\2\2\u00b9\u00ba\7t\2\2\u00ba.\3\2\2\2\u00bb\u00bc")
        buf.write("\7x\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be\7k\2\2\u00be\u00bf")
        buf.write("\7f\2\2\u00bf\60\3\2\2\2\u00c0\u00c1\7-\2\2\u00c1\62\3")
        buf.write("\2\2\2\u00c2\u00c3\7/\2\2\u00c3\64\3\2\2\2\u00c4\u00c5")
        buf.write("\7\'\2\2\u00c5\66\3\2\2\2\u00c6\u00c7\7,\2\2\u00c78\3")
        buf.write("\2\2\2\u00c8\u00c9\7\61\2\2\u00c9:\3\2\2\2\u00ca\u00cb")
        buf.write("\7@\2\2\u00cb<\3\2\2\2\u00cc\u00cd\7?\2\2\u00cd\u00ce")
        buf.write("\7?\2\2\u00ce>\3\2\2\2\u00cf\u00d0\7>\2\2\u00d0\u00d1")
        buf.write("\7?\2\2\u00d1@\3\2\2\2\u00d2\u00d3\7@\2\2\u00d3\u00d4")
        buf.write("\7?\2\2\u00d4B\3\2\2\2\u00d5\u00d6\7-\2\2\u00d6\u00d7")
        buf.write("\7-\2\2\u00d7D\3\2\2\2\u00d8\u00d9\7/\2\2\u00d9\u00da")
        buf.write("\7/\2\2\u00daF\3\2\2\2\u00db\u00dc\7e\2\2\u00dc\u00dd")
        buf.write("\7q\2\2\u00dd\u00de\7p\2\2\u00de\u00df\7u\2\2\u00df\u00e0")
        buf.write("\7v\2\2\u00e0H\3\2\2\2\u00e1\u00e2\7?\2\2\u00e2J\3\2\2")
        buf.write("\2\u00e3\u00e5\t\2\2\2\u00e4\u00e3\3\2\2\2\u00e5\u00e6")
        buf.write("\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("L\3\2\2\2\u00e8\u00ea\t\2\2\2\u00e9\u00e8\3\2\2\2\u00ea")
        buf.write("\u00ed\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2")
        buf.write("\u00ec\u00ee\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee\u00f0\7")
        buf.write("\60\2\2\u00ef\u00f1\t\2\2\2\u00f0\u00ef\3\2\2\2\u00f1")
        buf.write("\u00f2\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2")
        buf.write("\u00f3\u0101\3\2\2\2\u00f4\u00f6\t\2\2\2\u00f5\u00f4\3")
        buf.write("\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8")
        buf.write("\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fd\7\60\2\2\u00fa")
        buf.write("\u00fc\t\2\2\2\u00fb\u00fa\3\2\2\2\u00fc\u00ff\3\2\2\2")
        buf.write("\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0101\3")
        buf.write("\2\2\2\u00ff\u00fd\3\2\2\2\u0100\u00eb\3\2\2\2\u0100\u00f5")
        buf.write("\3\2\2\2\u0101N\3\2\2\2\u0102\u0103\7)\2\2\u0103\u0105")
        buf.write("\t\3\2\2\u0104\u0106\t\3\2\2\u0105\u0104\3\2\2\2\u0106")
        buf.write("\u0107\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2")
        buf.write("\u0108\u0109\3\2\2\2\u0109\u010c\7)\2\2\u010a\u010c\5")
        buf.write("Q)\2\u010b\u0102\3\2\2\2\u010b\u010a\3\2\2\2\u010cP\3")
        buf.write("\2\2\2\u010d\u010e\7)\2\2\u010e\u010f\t\3\2\2\u010f\u0110")
        buf.write("\7)\2\2\u0110R\3\2\2\2\u0111\u0112\7v\2\2\u0112\u0113")
        buf.write("\7t\2\2\u0113\u0114\7w\2\2\u0114\u011b\7g\2\2\u0115\u0116")
        buf.write("\7h\2\2\u0116\u0117\7c\2\2\u0117\u0118\7n\2\2\u0118\u0119")
        buf.write("\7u\2\2\u0119\u011b\7g\2\2\u011a\u0111\3\2\2\2\u011a\u0115")
        buf.write("\3\2\2\2\u011bT\3\2\2\2\u011c\u0120\t\3\2\2\u011d\u011f")
        buf.write("\t\4\2\2\u011e\u011d\3\2\2\2\u011f\u0122\3\2\2\2\u0120")
        buf.write("\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121V\3\2\2\2\u0122")
        buf.write("\u0120\3\2\2\2\u0123\u0125\t\5\2\2\u0124\u0123\3\2\2\2")
        buf.write("\u0125\u0126\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3")
        buf.write("\2\2\2\u0127\u0128\3\2\2\2\u0128\u0129\b,\2\2\u0129X\3")
        buf.write("\2\2\2\u012a\u012c\7\17\2\2\u012b\u012d\7\f\2\2\u012c")
        buf.write("\u012b\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u0130\3\2\2\2")
        buf.write("\u012e\u0130\7\f\2\2\u012f\u012a\3\2\2\2\u012f\u012e\3")
        buf.write("\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\b-\2\2\u0132Z\3")
        buf.write("\2\2\2\u0133\u0134\7\61\2\2\u0134\u0135\7,\2\2\u0135\u0139")
        buf.write("\3\2\2\2\u0136\u0138\13\2\2\2\u0137\u0136\3\2\2\2\u0138")
        buf.write("\u013b\3\2\2\2\u0139\u013a\3\2\2\2\u0139\u0137\3\2\2\2")
        buf.write("\u013a\u013c\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u013d\7")
        buf.write(",\2\2\u013d\u013e\7\61\2\2\u013e\u013f\3\2\2\2\u013f\u0140")
        buf.write("\b.\2\2\u0140\\\3\2\2\2\u0141\u0142\7\61\2\2\u0142\u0143")
        buf.write("\7\61\2\2\u0143\u0147\3\2\2\2\u0144\u0146\n\6\2\2\u0145")
        buf.write("\u0144\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145\3\2\2\2")
        buf.write("\u0147\u0148\3\2\2\2\u0148\u014a\3\2\2\2\u0149\u0147\3")
        buf.write("\2\2\2\u014a\u014b\b/\2\2\u014b^\3\2\2\2\22\2\u00e6\u00eb")
        buf.write("\u00f2\u00f7\u00fd\u0100\u0107\u010b\u011a\u0120\u0126")
        buf.write("\u012c\u012f\u0139\u0147\3\b\2\2")
        return buf.getvalue()


class grammarCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    DIGIT = 37
    FLT = 38
    STR = 39
    CHAR = 40
    BOOL = 41
    ID = 42
    WS = 43
    NL = 44
    BC = 45
    LC = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'.h>'", "'stdio'", "'('", "')'", "'{'", 
            "'}'", "','", "'return'", "'['", "']'", "'if'", "'else'", "'while'", 
            "'for'", "';'", "'continue'", "'break'", "'int'", "'float'", 
            "'char'", "'void'", "'+'", "'-'", "'%'", "'*'", "'/'", "'>'", 
            "'=='", "'<='", "'>='", "'++'", "'--'", "'const'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "DIGIT", "FLT", "STR", "CHAR", "BOOL", "ID", "WS", "NL", "BC", 
            "LC" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "DIGIT", "FLT", "STR", 
                  "CHAR", "BOOL", "ID", "WS", "NL", "BC", "LC" ]

    grammarFileName = "grammarC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


